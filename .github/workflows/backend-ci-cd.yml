name: Backend CI/CD

on:
  push:
    branches:
      - main
      - master
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci-cd.yml'
  pull_request:
    branches:
      - main
      - master
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci-cd.yml'

env:
  NODE_VERSION: '20.x'

jobs:
  test:
    name: Test Backend
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: invoicely_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        working-directory: ./backend
        run: npm ci

      - name: Run linter
        working-directory: ./backend
        run: |
          npm run build || true
          # Add linting command if you add eslint
          # npm run lint

      - name: Run type check
        working-directory: ./backend
        run: npm run build

      # Add tests when you create them
      # - name: Run tests
      #   working-directory: ./backend
      #   env:
      #     DATABASE_URL: postgresql://test_user:test_password@localhost:5432/invoicely_test
      #     JWT_SECRET: test-secret-key
      #     SESSION_SECRET: test-session-secret
      #     NODE_ENV: test
      #   run: npm test

  build:
    name: Build Backend
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        working-directory: ./backend
        run: npm ci

      - name: Build application
        working-directory: ./backend
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-build
          path: backend/dist
          retention-days: 7

  deploy-vercel:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        working-directory: ./backend
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        working-directory: ./backend
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts to Vercel
        working-directory: ./backend
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}

  deploy-other:
    name: Deploy to Other Platform (Customize as needed)
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: backend-build
          path: backend/dist

      # Example: Deploy to Railway
      # - name: Deploy to Railway
      #   uses: bervProject/railway-deploy@v1.0.0
      #   with:
      #     railway_token: ${{ secrets.RAILWAY_TOKEN }}
      #     service: backend
      #     detach: true

      # Example: Deploy to Render
      # - name: Deploy to Render
      #   uses: johnbeynon/render-deploy-action@v0.0.8
      #   with:
      #     service-id: ${{ secrets.RENDER_SERVICE_ID }}
      #     api-key: ${{ secrets.RENDER_API_KEY }}

      # Example: Deploy via SSH
      # - name: Deploy via SSH
      #   uses: appleboy/ssh-action@v1.0.3
      #   with:
      #     host: ${{ secrets.SSH_HOST }}
      #     username: ${{ secrets.SSH_USERNAME }}
      #     key: ${{ secrets.SSH_PRIVATE_KEY }}
      #     script: |
      #       cd /path/to/backend
      #       git pull
      #       npm ci
      #       npm run build
      #       pm2 restart backend

